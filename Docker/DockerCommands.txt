Container => Runtime instance of Docker image [Light weight virtual machine]
Docker Image => Set of files which has the application and its dependencies

Containerization => A standard unit of software that can package up your code and all its dependencies,
So the application runs quickly and reliably from one computing environment to another.

-----------------
Local Ubuntu app
-----------------
apt-get update

snap install docker
docker 28.1.1+1 from Canonicalâœ“ installed
docker version

docker image ls  ----==>  List docker images
docker container ls  ----==>  List all running containers
docker ps -a  ----==>  List all containers

docker pull ubuntu  ----==>  Pull a docker image

docker run -it --name c1 ubuntu  ----==>  Create a container by name "c1" using downloaded "ubuntu" image
												-t have a pseudo-terminal driver added
												-i container by default have a stdout stream, -i get stdin stream added

--Now we are inside "c1" container
ctrl + c  ----==>  To exit from container, This eventually stops the container


docker start c1  ----==>  Start the container if stopped
docker attach c1   ----==>  Enter inside container, This is possible only if container status is Up


--Now we are inside "c1" container and perform below steps
apt-get update  ----==>  Update ubuntu package list currently installed on system
apt-get install -y apache2 curl net-tools  ----==>  Install required tools with 'yes' for all questions
service apache2 status  ----==>  Check apache status
echo 'Hello World' > /var/www/html/index.html  ----==>  Default html path on apache
service apache2 start  ----==>  Start apache services
netstat -plnt  ----==>  -p Process ID,
						-l Listening sockets,
						-n Display port numbers and addresses in numeric format,
						-t Display only tcp connection
curl 0.0.0.0  ----==>  Connect to web server
curl localhost  ----==>  Same as above
ctrl + p + q  ----==>  exit will stop container, so use this


docker inspect c1  ----==>  Get complete container information
docker inspect c1 -f '{{.NetworkSettings.IPAddress}}'  ----==>  Get only required container information

=================================================================================================================
-------------
Port Binding
-------------
docker run -itd --name c2 -p 8080:81 ubuntu  ----==>  Create a container by name "c2" using downloaded "ubuntu" image
													  -d Detached mode, Docker can run your container in detached mode in the background
													  8080 Host port, 80 Container port

netstat -plnt  ----==>  Check the listening ports of Docker host

=================================================================================================================
--------------------------------
Move local images to Docker hub
--------------------------------
Create a repository "homepractice" in docker hub (hub.docker.com)

docker tag ubuntu:latest bhanuprakash27/homepractice:ubuntuapacheimage
docker push bhanuprakash27/homepractice:ubuntuapacheimage
		The push refers to repository [docker.io/bhanuprakash27/homepractice]
		a8346d259389: Preparing
		denied: requested access to the resource is denied

docker login -u bhanuprakash27 -p <token here>  ----==>  Generate a tocken in "Account Settings -> Personal access tokens"

docker push bhanuprakash27/homepractice:ubuntuapacheimage
		The push refers to repository [docker.io/bhanuprakash27/homepractice]
		a8346d259389: Mounted from library/ubuntu
		ubuntuapacheimage: digest: sha256:eac4bf26432e20229396bc04275a777ef373a565ba53853bde69f1c5a591a94b size: 529

----------------------------
Pull images from Docker hub
----------------------------
docker system prune -af  ----==>  Delete all images and inactive containers, this will not delete active containers
								  -a Include all unused imageg
								  -f Delete forcefully without prompting for confirmation,

docker pull bhanuprakash27/homepractice:ubuntuapacheimage  ----==>  Pull image from Docker hub
docker run -itd --name c1 bhanuprakash27/homepractice:ubuntuapacheimage  ----==>  Create a container by name "c1" using downloaded image from Docker hub
docker exec -it c1 bash  ----==>  Enter into container without "attach" command

=================================================================================================================
------------
Docker file
------------
FROM  ----==>  Base image, It is usually the first instruction in a Dockerfile
LABEL  ----==>  Label your image (Key value pair)
WORKDIR  ----==>  Define your work directory path
ENV  ----==>  Environment variables
RUN  ----==>  Run shell commands, can be utilized to install an application, update libraries, or do general setup
COPY  ----==>  Allows to copy file from host to image
ENTRYPOINT  ----==>  sets the main command, generally not easily overridden from the command line
CMD  ----==>  Similar to ENTRYPOINT, Arguments can be overridden
EXPOSE  ----==>  Container port

Example:
FROM ubuntu:18.04
LABEL name=apache maintainer=BhanuPrakash
ENV HELLO="WORLD"
RUN  apt-get update && apt-get install -y apache2 curl net-tools
COPY ./index.html /var/www/html/index.html
ENTRYPOINT apachectl -D FOREGROUND
EXPOSE 80

vi dockerfile  ----==>  Paste above example content in file and create index.html at required path
docker build -t ubuntuimage .  ----==>  used to construct Docker images from a Dockerfile.
										It reads the instructions within the Dockerfile and executes them to create a new image.
										This process automates the creation of container images, ensuring consistency and repeatability.
										Image name must be lowercase (ERROR: invalid tag "ubuntuImage": repository name must be lowercase)